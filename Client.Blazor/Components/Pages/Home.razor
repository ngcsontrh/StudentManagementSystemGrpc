@page "/"
@page "/students"
@using Client.Blazor.Models
@using Grpc.Net.Client
@using ProtoBuf.Grpc.Client
@using Shared
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div>
    <SearchField OnStudentFound="OnSearchFound" OnStudentNotFound="OnSearchedNotFound" />
</div>

<div class="d-flex justify-content-between align-items-center">
    <Button Type="primary" OnClick="@(e => OpenPopup("Create"))">Add new student</Button>
    <div>
        <Dropdown Trigger="@(new Trigger[] { Trigger.Click })">
            <Overlay>
                <Menu OnMenuItemClicked="OnSort">
                    <MenuItem Key="sbId">
                        <Text>Sort by Id</Text>
                    </MenuItem>
                    <MenuItem Key="sbName">
                        <Text>Sort by Name</Text>
                    </MenuItem>
                    <MenuItem Key="sbBirthday">
                        <Text>Sort by Birthday</Text>
                    </MenuItem>
                    <MenuItem Key="sbAddress">
                        <Text>Sort by Address</Text>
                    </MenuItem>
                    <MenuItem Key="sbClassId">
                        <Text>Sort by Class Id</Text>
                    </MenuItem>
                    <MenuItem Key="sbClassName">
                        <Text>Sort by Class Name</Text>
                    </MenuItem>
                </Menu>
            </Overlay>
            <ChildContent>
                <Button>
                    Sort by <Icon Type="caret-down" Theme="outline" />
                </Button>
            </ChildContent>
        </Dropdown>
    
        <Button OnClick="LoadStudentsAsync">Reload Page</Button>
    </div>

</div>
    <Table DataSource="@students"
           RowKey="s => s.Id"
           PageIndex="pageNumber"
           Loading="(students == null)"
           Total="total"
           PageSize="pageSize"
           HidePagination="(total <= pageSize)"
           OnPageIndexChange="HandlePageIndexChange"
           OnPageSizeChange="HandlePageSizeChange">
        <ColumnDefinition Title="Index">
            @{
                int index = students!.IndexOf(context) + 1 + ((pageNumber - 1) * pageSize);
            }
            @index
        </ColumnDefinition>
        <PropertyColumn Property="s => s.Id" Title="Id" />
        <PropertyColumn Property="s => s.FullName" Title="Full Name" />
        <PropertyColumn Property="s => s.Birthday" Title="Birthday" Format="dd/MM/yyyy" />
        <PropertyColumn Property="s => s.Address" Title="Address" />
        <PropertyColumn Property="s => s.ClassId" Title="Class Id" />
        <PropertyColumn Property="s => s.ClassName" Title="Class Name" />
        <ActionColumn Title="Action" Class="d-flex justify-content-center align-items-center gap-2">
            @* <Popconfirm Title="Sure to delete?"
                        OnConfirm="()=> HandleOnDeleteAsync(context.Id)"
                        OkText="Yes"
                        CancelText="No">
                <Button Danger>
                    Delete
                </Button>
            </Popconfirm> *@
            <Button Danger OnClick="@(() => OpenPopup("Delete", context))">Delete</Button>
            <Button OnClick="@(() => OpenPopup("Update", context))">Update</Button>
            <Button OnClick="@(() => OpenPopup("Details", context))">Details</Button>
        </ActionColumn>
    </Table>

@if (isOpenUpdatePopup)
{    
    <StudentPopup IsVisible="isOpenUpdatePopup" StudentProfile="student" ReloadStudents="LoadStudentsAsync" OnClose="ClosePopup" Status="Update" />
}
@if (isOpenDetailsPopup)
{
    <StudentPopup IsVisible="isOpenDetailsPopup" StudentProfile="student" OnClose="ClosePopup" Status="Details" />
}
@if (isOpenCreatePopup)
{
    <StudentPopup IsVisible="isOpenCreatePopup" StudentProfile="student" ReloadStudents="LoadStudentsAsync" OnClose="ClosePopup" Status="Create" />
}
@if (isDeletePopup)
{
    <StudentPopup IsVisible="isDeletePopup" StudentProfile="student" ReloadStudents="LoadStudentsAsync" OnClose="ClosePopup" Status="Delete" />
}